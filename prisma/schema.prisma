generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    email        String       @unique
    password     String
    image        String?
    bannerImage  String?
    bio          String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    tweets       Tweet[]
    likes        Like[]
    replies      Reply[]
    retweets     Retweet[]
    followersIds String[]     @db.ObjectId
    followers    User[]       @relation("FollowRelation", fields: [followersIds], references: [id])
    followingIds String[]     @db.ObjectId
    following    User[]       @relation("FollowRelation", fields: [followingIds], references: [id])
    savedTweets  SavedTweet[]
    ReplyLike    ReplyLike[]
}

model Tweet {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    text         String
    image        String?
    replyPrivate Boolean      @default(false)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    userId       String       @db.ObjectId
    user         User         @relation(fields: [userId], references: [id])
    likes        Like[]
    replies      Reply[]
    retweets     Retweet[]
    savedTweets  SavedTweet[]
}

model Like {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    tweetId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    tweet     Tweet    @relation(fields: [tweetId], references: [id])

    @@unique([userId, tweetId])
}

model Reply {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    text       String
    image      String?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    userId     String      @db.ObjectId
    tweetId    String      @db.ObjectId
    user       User        @relation(fields: [userId], references: [id])
    tweet      Tweet       @relation(fields: [tweetId], references: [id])
    replyLikes ReplyLike[]
}

model ReplyLike {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    replyId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    reply     Reply    @relation(fields: [replyId], references: [id])

    @@unique([userId, replyId])
}

model Retweet {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    tweetId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    tweet     Tweet    @relation(fields: [tweetId], references: [id])

    @@unique([userId, tweetId])
}

model SavedTweet {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @db.ObjectId
    tweetId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    tweet     Tweet    @relation(fields: [tweetId], references: [id])

    @@unique([userId, tweetId])
}
